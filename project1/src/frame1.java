/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
import java.io.IOException;
import javax.swing.JButton;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;


/**
 *
 * 
 */
public class frame1 extends javax.swing.JFrame {

    /**
     * Creates new form frame1
     */
    public frame1() {
        initComponents();
        
    }
     
    
    public JButton getEncodeButton() {
        return encodeButton;
    }
    
    public JButton getDecodeButton() {
        return decodeButton;
    }
    
    public String getPlainText() {
        return Plain_text.getText();
    }
    
    public void setEncodedText(String text) {
        Encoded.setText(text);
    }
    
    public String getEncodedText() {
        return Encoded.getText();
    }
    public JButton getFrequencyButton() {
        return frequency;
    }
    
    public void setPlainText(String text) {
        Plain_text.setText(text);
    }
    public void setFrequencyText(String text) {
    output_feild.setText(text);
    }
    
   public JButton getDisplayHuffmanTreeButton() {
        return display_huffman_tree; // Return the display_huffman_tree button
    }

    public void setOutputText(String huffmanTreeString) {
        output_feild.setText(huffmanTreeString);
    }
public JButton getSaveHuffmanButton() {
    return save_huffman;
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        Plain_text = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        Encoded = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        output_feild = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        frequency = new javax.swing.JButton();
        display_huffman_tree = new javax.swing.JButton();
        display_huffman_code = new javax.swing.JButton();
        save_huffman = new javax.swing.JButton();
        load_huffman = new javax.swing.JButton();
        exit = new javax.swing.JButton();
        encodeButton = new javax.swing.JButton();
        decodeButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel2.setText("Plain text string");

        jLabel3.setText("Encoded text string");

        Encoded.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EncodedActionPerformed(evt);
            }
        });

        output_feild.setColumns(20);
        output_feild.setRows(5);
        jScrollPane1.setViewportView(output_feild);

        jLabel4.setText("Output");

        frequency.setText("Display Frequencies");
        frequency.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                frequencyActionPerformed(evt);
            }
        });

        display_huffman_tree.setText("Display Huffman Tree");
        display_huffman_tree.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                display_huffman_treeActionPerformed(evt);
            }
        });

        display_huffman_code.setText("Display Huffman Codes");
        display_huffman_code.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                display_huffman_codeActionPerformed(evt);
            }
        });

        save_huffman.setText("Save Huffman Tree");
        save_huffman.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                save_huffmanActionPerformed(evt);
            }
        });

        load_huffman.setText("Load Huffman Tree");
        load_huffman.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                load_huffmanActionPerformed(evt);
            }
        });

        exit.setText("Exit");

        encodeButton.setText("Encode");
        encodeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                encodeButtonActionPerformed(evt);
            }
        });

        decodeButton.setText("Decode");
        decodeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decodeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(Plain_text, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(encodeButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Encoded, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(decodeButton, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addGap(323, 323, 323))
            .addGroup(layout.createSequentialGroup()
                .addGap(138, 138, 138)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(display_huffman_tree, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(display_huffman_code, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(frequency, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(151, 151, 151)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(save_huffman, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(load_huffman, javax.swing.GroupLayout.DEFAULT_SIZE, 142, Short.MAX_VALUE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(exit, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Plain_text, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Encoded, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(decodeButton)
                            .addComponent(encodeButton)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(frequency)
                    .addComponent(save_huffman))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(display_huffman_tree)
                    .addComponent(load_huffman))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(display_huffman_code)
                    .addComponent(exit, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(52, 52, 52))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void frequencyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_frequencyActionPerformed
    String inputText = getPlainText();
    Map<Character, Integer> frequencyMap = getFrequencyMap(inputText);
    setFrequencyText(getFrequencyText(frequencyMap));
    }//GEN-LAST:event_frequencyActionPerformed

    private void display_huffman_treeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_display_huffman_treeActionPerformed
        String inputText = getPlainText();
        Map<Character, Integer> frequencyMap = getFrequencyMap(inputText);
        HuffmanTree huffmanTree = new HuffmanTree(frequencyMap);
        String huffmanTreeString = huffmanTree.toString();
        setOutputText(huffmanTreeString);
    }//GEN-LAST:event_display_huffman_treeActionPerformed

    private void display_huffman_codeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_display_huffman_codeActionPerformed
        String inputMessage = getPlainText();
        Map<Character, Integer> frequencyMap = getFrequencyMap(inputMessage);
        HuffmanTree huffmanTree = new HuffmanTree(frequencyMap);
        Map<Character, String> huffmanCodes = huffmanTree.generateCodes();

        StringBuilder huffmanCodesText = new StringBuilder("Huffman Codes:\n");
        for (Map.Entry<Character, String> entry : huffmanCodes.entrySet()) {
            huffmanCodesText.append(entry.getKey()).append(": ").append(entry.getValue()).append("\n");
        }
        setOutputText(huffmanCodesText.toString());
    }//GEN-LAST:event_display_huffman_codeActionPerformed

    private void decodeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decodeButtonActionPerformed
        
          String encoded = getEncodedText();
        HuffmanTree huffmanTree = new HuffmanTree(Collections.emptyMap());
        String decodedText = huffmanTree.decode(encoded);
        setPlainText(decodedText);    
        
    }//GEN-LAST:event_decodeButtonActionPerformed

    private void encodeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_encodeButtonActionPerformed
        
        String plaintext = getPlainText();
        HuffmanTree huffmanTree = new HuffmanTree(Collections.emptyMap());
        String encodedText = huffmanTree.encode(plaintext);
        setEncodedText(encodedText);
        
        
    }//GEN-LAST:event_encodeButtonActionPerformed

    private void save_huffmanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_save_huffmanActionPerformed
        
    Main.saveHuffmanTreeToFile();
    }//GEN-LAST:event_save_huffmanActionPerformed

    private void load_huffmanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_load_huffmanActionPerformed
        output_feild.setText("hello5");
    }//GEN-LAST:event_load_huffmanActionPerformed

    private void EncodedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EncodedActionPerformed
        String encodedMessage = Encoded.getText();
        HuffmanTree huffmanTree = new HuffmanTree(Collections.emptyMap());
        String decodedMessage = huffmanTree.decode(encodedMessage);
        Plain_text.setText(decodedMessage);
    }//GEN-LAST:event_EncodedActionPerformed

    /**
     * @param args the command line arguments
     */
       public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(() -> {
            frame1 gui = new frame1();
            gui.setVisible(true);

            gui.getEncodeButton().addActionListener((java.awt.event.ActionEvent evt) -> {
                String inputMessage = gui.getPlainText();
                Map<Character, Integer> frequencyMap = getFrequencyMap(inputMessage);
                HuffmanTree huffmanTree = new HuffmanTree(frequencyMap);
                String encodedMessage = huffmanTree.encode(inputMessage);
                gui.setEncodedText(encodedMessage);
            });

            gui.getFrequencyButton().addActionListener((java.awt.event.ActionEvent evt) -> {
                String inputMessage = gui.getPlainText();
                Map<Character, Integer> frequencyMap = getFrequencyMap(inputMessage);
                gui.setFrequencyText(getFrequencyText(frequencyMap));
            });

            gui.getDisplayHuffmanTreeButton().addActionListener((java.awt.event.ActionEvent evt) -> {
                String inputMessage = gui.getPlainText();
                Map<Character, Integer> frequencyMap = getFrequencyMap(inputMessage);
                HuffmanTree huffmanTree = new HuffmanTree(frequencyMap);
                String huffmanTreeString = huffmanTree.toString();
                gui.setOutputText(huffmanTreeString);
            });

            gui.getDecodeButton().addActionListener((java.awt.event.ActionEvent evt) -> {
                String encodedMessage = gui.getEncodedText();
                HuffmanTree huffmanTree = new HuffmanTree(Collections.emptyMap());
                String decodedMessage = huffmanTree.decode(encodedMessage);
                gui.setPlainText(decodedMessage);
            });
        });
    }

    private static Map<Character, Integer> getFrequencyMap(String message) {
        Map<Character, Integer> frequencyMap = new HashMap<>();
        for (char c : message.toCharArray()) {
            frequencyMap.put(c, frequencyMap.getOrDefault(c, 0) + 1);
        }
        return frequencyMap;
    }

    private static String getFrequencyText(Map<Character, Integer> frequencyMap) {
        StringBuilder frequencyText = new StringBuilder("Character Frequency:\n");
        for (Map.Entry<Character, Integer> entry : frequencyMap.entrySet()) {
            frequencyText.append(entry.getKey()).append(": ").append(entry.getValue()).append("\n");
        }
        return frequencyText.toString();
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Encoded;
    private javax.swing.JTextField Plain_text;
    private javax.swing.JButton decodeButton;
    private javax.swing.JButton display_huffman_code;
    private javax.swing.JButton display_huffman_tree;
    private javax.swing.JButton encodeButton;
    private javax.swing.JButton exit;
    private javax.swing.JButton frequency;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton load_huffman;
    private javax.swing.JTextArea output_feild;
    private javax.swing.JButton save_huffman;
    // End of variables declaration//GEN-END:variables

   
}
